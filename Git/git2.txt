    git 운영법 (gif flow)

        branch (분기점)
            나뭇가지, 나무에서 여러 갈래로 뻗은 줄기
            하나의 배포중인 서비스 (나무)
            그리고 brnach라고 하는 것은 특정 기능을 개발하거나 버그를 수정하거나 할 때
            또 하나의 길을 만들어내는 것

        add/commit
            add
                - 스테이징, 깃에서 수정된 파일을 보내기 전에 준비
            commit 
                - 깃에 파일을 보내는 것, 저장

        push/pull
            push --force
                - commit된 파일을 git에 있는 저장소(레퍼지토리)에 등록
            pull
                - 업데이트 된 git 저장소의 코드(파일)을 내 파일에 가지고 오는 것(적용)
                  현재 배포된 버전과 내 컴퓨터에 존재하는 내 버전과 맞추는 것

        pull request
            허락, merge 실행 시 데이터가 바로 적용되는 것이 아니라 pull requrest에
            등록하고 request에 등록된 사항을 허용 해주어야 기본 branch에 push가 되는
            현상

            (내카 코드 수정했으니 검토해봐 -> 팀장님, 컨펌 부탁드립니다)

        merge
            새로 만들어지를 브런치와 기본 브런치를 합치를 것   


    git flow
        - flow 전략은 회사마다 다르지만 그 형태는 거의 비슷


        hotfix (일시적) -- 버그 수정
        release (일시적) -- 새로운 버전 테스트용 (dev 클론) v2
        feature (일시적) -- 기능 추가

        
        dev --------------------------------------------------->> (본체 클론) 항상
        main/master ------------------------------------------->> (배포, 본체) 항상

---------------------------------------------------------------------------------

    git commit 컨벤션
        git에 올릴 코드를 스테이징하고 커밋을 할 시 커밋의 상태를 나타내는 메시지를
        함께 전달

        ex)
        feat : 새로운 기능 추가
        fix : 버그 수정
        docs : 문서 수정
        style : 코드 포멧팅(코드의 스타일 수정, 코드 변경은 없어야함)
        refactor : 코드 리펙토링
        test : 테스트 단위/코드 추가
        chore : 패키지 매니저, 빌드 수정

        => feat: 로그인 기능 추가, [Feat] 로그인 기능 추가, [Add] 로그인 기능 추가

    issue tracker란?

        개발 시 발생되는 버그와 논쟁, 논점(개발자들끼리의 논쟁)
        이러한 이슈들을 기록하고 해당 이슈가 되면 이슈를 닫음으로서 (닫힌 이슈는
        히스토리에서 확인이 가능 )

        이슈 등록 시 이슈에 대한 내용과 앞에 번호를 붙여서 만들어 줌
        ex) 사용자 데이터를 받아왔으나 .... map is not a function... #10

        해당 이슈가 해결되면 커밋 메시지에

        close
        closed 
        fix
        fixed
        resolove

        라는 깃 컨벤션과 앞에 이슈 번호를 붙여서 커밋
        ex) close #10

        ++ github action / 이슈 등록시 자동으로 브랜치 생성 해결 시 자동 삭제

---------------------------------------------------------------------------------

    터미널 경로 명령어

     cd 경로 ==> 해당 경로로 이동 (폴더명=>하위폴더, 절대경로=>절대경로)
     cd .. => 경로 상위 포로 이동


---------------------------------------------------------------------------------

    깃 로직 명령어

    1. git init => 숨김 폴더로 .git이라는 폴더가 생성
    + .gitignore (깃허브에 올리고싶지 않은 파일을 정의)

    2. git remote add/remove origin "깃허브 레퍼지토리 주소"
    => 깃허브 레퍼지토리와 연결
    
    3. git add .
    => 해당 경로에 있는 모든 파일을 스테이징

    4. git commit -m "커밋메시지"
    => 커밋메시지 내용으로 스테이징 되어있는 파일을 깃에 저장

                (2.의 remote 이름과 같아야함)
                
    5. git push -u origin <branch> / git push
    => 깃에 커밋된 코드를 올리는 것 (밀어넣다)
    ex) git push origin master/main

    6. git pull origin <branch> / git pull
    => 깃에 업데이트 된 내용을 내려받는 것 (땡겨온다)
    => 에러를 막기 위해 보통 푸쉬 전 항상 풀을 받고 진행

        * push 에러 해결

        fatal: The current branch master has no upstream branch.
        To push the current branch and set the remote as upstream, 
        use
        => git push --set-upstream origin master
        => git pull origin master --allow-unrelated-histories

        * pull 에러 해결
        -> git pull origin master --allow-unrelated-histories

---------------------------------------------------------------------------------

        git branch (브랜치 조회)
        git branch 브랜치명 (브랜치 생성)
        git checkout 브랜치명 (브랜치 focus)
        git branch -d 브랜치명 (브랜치 삭제)

        ex)

            ----------------------------------- main/master 복제한 dev 브랜치 생성

            git bracnh dev (dev 브랜치 생성)
            git checkout dev (dev 브랜치 이동)
            git push (dev 브랜치에 현재 코드 복사)
            git branch (현재 생성되어있는 브랜치 확인)

            ------------------------------ 새로운 기능을 추가할 브랜치 생성/머지/삭제

            git branch feature ( 새로운 브랜치 생성 )
            git checkout feature ( 새로운 브랜치로 이동 )

            ...code edit

            git add . / commit  (스테이징 커밋)

            git checkout dev ( 본줄기 브랜치로 이동 )
            git merge feature ( 머지 진행  -dev 브랜치에서 진행- )

            git pull ( 원본과 동기화 )
            git push ( 본줄기 브랜치에 수정 사항 적용)
            git bracnh -d feature ( 브랜치 삭제 )

            * 상황 발생
                hotfix 브랜치 생성 --> 버그 수정 ---> dev merge
                dev - test, 이상 없으면 master에 pull request
                hotfix 브랜치 삭제

            git hub에서 pull reaquest를 통해 main/master(defalut) merge 요청

----------------------------------------------------------------------

    fork
     중앙 관리소에 있는 데이터를 내 개인 저장소로 가지고 오는 것
     단점 flow가 어렵고 통일 관리가 어렵다

     pull 대신 fetch를 통해 remote와 내 래퍼지토리의 fork된 코드를 비교하여
     최신 상태 코드를 유지

    git clone 레퍼지토리 주소
     현재 협업 중인 래퍼지토리의 코드를 복사하여 내 로컬 환경에 저장
    > 클론한 폴더로 이동한 다음에 git init


    github pages
     git hub의 무료 호스팅 기능, 정적인 사이트를 배포 [다른 사람이 접속할 수 있도록]

---------------------------------------------------------------------

    * 충돌해결

    romote, branch가 많아지면서
    git pull/push <remote> <branch>

    >>>>>>>>>>>>>>>>>>>>> HEAD
    원본코드
    =====================
    받아온 코드

    해당 부분의 충돌을 해결한 후 push 혹은 merge

----------------------------------------------------------------------

    * 편의성을 위한 선택사항

    github desktop > 구글링 첫번째 페이지 다운로드
    git bash
    git lfs (대용량 업로드)

    --> 다운 받고 적용가능한 것들...